{"version":3,"sources":["dawn.jpg","QuoteMachine.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","withStyles","card","padding","progress","color","marginTop","props","react_default","a","createElement","Card","className","classes","Typography","CardContent","isDoneFetching","id","randomQuote","quote","author","style","display","justifyContent","CircularProgress","size","CardActions","Button","onClick","nextRandomQuote","IconButton","target","href","concat","index_es","icon","faTwitter","styles","container","alignItems","height","background","backgroundImage","backgroundSize","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","quotes","randomQuoteIndex","bind","assertThisInitialized","_this2","fetch","then","response","json","setState","generateRandomQuoteIndex","random","length","Grid","justify","xs","sm","md","lg","xl","item","src_QuoteMachine_0","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a7fdb8e7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dawn.8ba1b652.jpg\";","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport './QuoteMachine.css';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst styles = {\r\n  card: {\r\n    padding: '1rem',\r\n  },\r\n  progress: {\r\n    color: '#9a9a9a',\r\n    marginTop: '10px'\r\n  }\r\n};\r\n\r\n// Parentheses around function body is implicit return\r\nconst QuoteMachine = (props) => (\r\n  // It's not this.props.classes because this is a functional component and therefore it doesn't have a this instance\r\n  <Card className={props.classes.card}>\r\n    <Typography>\r\n      <CardContent >\r\n        {props.isDoneFetching ?\r\n          (\r\n              <div className=\"quote-parent\" id=\"text\">\r\n                <p className=\"quote\">{props.randomQuote.quote}</p>\r\n                <p className=\"author\" id=\"author\">–{props.randomQuote.author}</p>\r\n              </div>\r\n          ) : (\r\n            <div style={{display: 'flex', justifyContent: 'center'}}>\r\n              <CircularProgress\r\n                className={props.classes.progress}\r\n                size={50}\r\n              />\r\n            </div>\r\n          )\r\n          }\r\n      </CardContent>\r\n    </Typography>\r\n\r\n    <CardActions>\r\n      <Button\r\n        id=\"new-quote\"\r\n        size=\"large\"\r\n        onClick={props.nextRandomQuote}\r\n      >\r\n        Next\r\n      </Button>\r\n\r\n      {props.isDoneFetching ?\r\n        <IconButton\r\n          id=\"tweet-quote\"\r\n          target=\"_blank\"\r\n          href={`https://twitter.com/intent/tweet?text=\"${props.randomQuote.quote}\"+–${props.randomQuote.author}`}\r\n        >\r\n          <FontAwesomeIcon icon={faTwitter} size=\"md\" />\r\n        </IconButton>\r\n      : null}\r\n    </CardActions>\r\n  </Card>\r\n)\r\n\r\nexport default withStyles(styles)(QuoteMachine);\r\n","import React, { Component } from 'react';\r\nimport QuoteMachine from './QuoteMachine';\r\nimport { random } from 'lodash';\r\nimport 'typeface-roboto'; // From Material-UI\r\nimport { Grid } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport backgroundImage from './dawn.jpg';\r\n\r\nconst styles = {\r\n  // container is root component (set in Grid component instance)\r\n  container: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    height: '100vh',\r\n    background: `url(${backgroundImage}) center`,\r\n    backgroundSize: 'cover', // Using this in background causes issues\r\n  }\r\n};\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    // Passing props to super only needed then you want to access this.props in constructor\r\n    super();\r\n    this.state = {\r\n      quotes: [],\r\n      randomQuoteIndex: null,\r\n      isDoneFetching: false\r\n    }\r\n    this.nextRandomQuote = this.nextRandomQuote.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://gist.githubusercontent.com/nataliecardot/0ca0878d2f0c4210e2ed87a5f6947ec7/raw/3b071344ee593408b20d5895c014fea7dbd94236/quotes.json')\r\n      // Takes a JSON response string and parses it into JS object\r\n      .then(response => response.json())\r\n      // state is set to quotes: quotes due to destructuring\r\n      .then(quotes => this.setState({\r\n          quotes,\r\n          randomQuoteIndex: this.generateRandomQuoteIndex(quotes),\r\n          isDoneFetching: true\r\n        }));\r\n  }\r\n\r\n  // Returns object with quote and author properties from quote state (fetched array of objects) at random index returned by generateRandomQuoteIndex method\r\n  randomQuote() {\r\n    return this.state.quotes[this.state.randomQuoteIndex];\r\n  }\r\n\r\n  // Returns integer representing index in quotes state. Having quotes as argument rather than referencing this.states.quote is needed for setState in componentDidMount. Otherwise, randomQuoteIndex is called before quotes state is set, meaning state would have to be set in setState callback after first setState for quotes set\r\n  generateRandomQuoteIndex(quotes) {\r\n    return random(0, quotes.length - 1);\r\n  }\r\n\r\n  // Sets state with results of calling generateRandomQuoteIndex again to generate new random index based on quotes state (array of objects). Used only when \"next\" button is clicked to display new quote. Triggers new render since random index state changes; quote displayed by randomQuote() call in render() changes\r\n  nextRandomQuote() {\r\n    this.setState({\r\n      // This causes randomQuoteIndex state to change (since it uses randomQuoteIndex), triggering rerender\r\n      randomQuoteIndex: this.generateRandomQuoteIndex(this.state.quotes)\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid\r\n        id=\"quote-box\"\r\n        className={this.props.classes.container}\r\n        justify=\"center\"\r\n        container\r\n      >\r\n        <Grid xs={10} sm={9} md={8} lg={7} xl={6} item>\r\n          <QuoteMachine\r\n            isDoneFetching={this.state.isDoneFetching}\r\n            randomQuote={this.randomQuote()}\r\n            nextRandomQuote={this.nextRandomQuote}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\n// Passing styles into withStyles function returns a higher order component in which App component can be passed so that classes prop imports styles\r\nexport default withStyles(styles)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}